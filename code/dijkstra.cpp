#include<SFML/Graphics.hpp>
#include<iostream>
using namespace std;
#define V 52
int node[V],plen;
class TileMap : public sf::Drawable, public sf::Transformable
{
public:

	bool load(const std::string& tileset, sf::Vector2u tileSize, const int* tiles, unsigned int width, unsigned int height)
	{

		if (!m_tileset.loadFromFile(tileset))
			return false;


		m_vertices.setPrimitiveType(sf::Quads);
		m_vertices.resize(width * height * 4);


		for (unsigned int i = 0; i < width; ++i)
			for (unsigned int j = 0; j < height; ++j)
			{

				int tileNumber = tiles[i + j * width];


				int tu = tileNumber % (m_tileset.getSize().x / tileSize.x);
				int tv = tileNumber / (m_tileset.getSize().x / tileSize.x);


				sf::Vertex * quad = &m_vertices[(i + j * width) * 4];


				quad[0].position = sf::Vector2f(i * tileSize.x, j * tileSize.y);
				quad[1].position = sf::Vector2f((i + 1) * tileSize.x, j * tileSize.y);
				quad[2].position = sf::Vector2f((i + 1) * tileSize.x, (j + 1) * tileSize.y);
				quad[3].position = sf::Vector2f(i * tileSize.x, (j + 1) * tileSize.y);


				quad[0].texCoords = sf::Vector2f(tu * tileSize.x, tv * tileSize.y);
				quad[1].texCoords = sf::Vector2f((tu + 1) * tileSize.x, tv * tileSize.y);
				quad[2].texCoords = sf::Vector2f((tu + 1) * tileSize.x, (tv + 1) * tileSize.y);
				quad[3].texCoords = sf::Vector2f(tu * tileSize.x, (tv + 1) * tileSize.y);
			}

		return true;
	}

private:

	virtual void draw(sf::RenderTarget & target, sf::RenderStates states) const
	{

		states.transform *= getTransform();

		states.texture = &m_tileset;


		target.draw(m_vertices, states);
	}

	sf::VertexArray m_vertices;
	sf::Texture m_tileset;
};
int minDistance(int dist[], bool sptSet[])
{

	int min = INT_MAX, min_index;

	for (int v = 0; v < V; v++)
		if (sptSet[v] == false &&
			dist[v] <= min)
			min = dist[v], min_index = v;

	return min_index;
}

void printPath(int parent[], int src, int dest)
{
	plen = 0;
	node[plen] = dest;


	while (src != dest)
	{
		plen++;
		node[plen] = parent[dest];
		dest = parent[dest];
    }

}


void printSolution(int dist[], int src, int dest, int parent[])
{

	cout << "Minimum diatance for query is:";
	cout << dist[dest] << endl;
	printPath(parent, src, dest);
}
void dijkstra(int graph[V][V], int src, int dest)
{


	int dist[V];
	bool sptSet[V];
	int parent[V];

	for (int i = 0; i < V; i++)
	{
		parent[0] = -1;
		dist[i] = INT_MAX;
		sptSet[i] = false;
	}
	dist[src] = 0;


	for (int count = 0; count < V - 1; count++)
	{

		int u = minDistance(dist, sptSet);
		sptSet[u] = true;
		for (int v = 0; v < V; v++)


			if (!sptSet[v] && graph[u][v] &&
				dist[u] + graph[u][v] < dist[v])
			{
				parent[v] = u;
				dist[v] = dist[u] + graph[u][v];
			}
	}

    printSolution(dist, src, dest, parent);
}

int main()
{
	sf::RenderWindow window(sf::VideoMode(784,496), "Tilemap");


	 int level[] =
	{
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,38,38,38,38,38,38,38,38,38,38,38,1,1,1,1,1,1,1,5,5,5,5,5,1,1,1,1,1,
		38,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,38,38,38,38,1,5,5,5,5,5,1,5,5,5,5,5,1,5,5,5,1,
		38,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,1,1,1,1,1,5,5,5,5,5,1,5,5,5,5,5,1,5,5,5,1,
		38,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,1,5,5,5,1,5,5,5,5,5,1,5,5,5,5,5,1,5,5,5,1,
		38,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,1,5,5,5,1,5,5,5,5,5,1,1,1,1,1,1,1,5,5,5,1,
		38,5,5,5,5,5,5,5,1,1,1,1,1,1,1,5,5,5,5,5,1,5,5,5,5,5,5,5,1,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,
		1,5,5,5,5,5,5,5,38,38,38,38,38,38,1,5,5,5,5,5,1,1,1,1,1,1,1,1,1,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,
		1,5,5,5,5,5,5,5,38,38,38,38,38,38,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,38,5,5,5,5,5,5,5,5,5,5,5,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,1,5,5,38,38,38,5,5,1,1,1,1,1,1,1,1,1,
		1,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,1,5,5,38,38,38,5,5,1,5,5,5,5,5,5,5,38,
		1,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,1,1,1,1,1,1,5,5,5,38,5,5,5,1,5,5,5,5,5,5,5,38,
		1,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,38,
		1,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,1,1,1,1,1,
		1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,1,5,5,5,38,
		1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,1,5,5,5,38,
		1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,1,5,5,5,38,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,1,1,1,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,38,
		38,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,1,5,5,5,1,38,38,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,38,
		38,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,1,5,5,5,1,38,38,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,38,
		38,5,5,5,5,5,5,5,5,5,1,5,5,5,5,38,5,5,5,5,1,5,5,5,1,38,38,5,5,5,1,5,5,5,5,38,38,38,5,5,5,5,1,1,1,1,1,1,1,
		38,5,5,5,5,5,5,5,5,5,1,5,5,5,38,38,38,5,5,5,1,5,5,5,1,38,38,5,5,5,1,5,5,5,5,38,38,38,5,5,5,5,1,5,5,5,5,5,1,
		38,5,5,5,5,5,5,5,5,5,1,5,5,5,38,38,38,5,5,5,1,5,5,5,1,38,38,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,
		1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,38,5,5,5,5,1,1,1,1,1,38,38,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,
		1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,1,1,1,1,1,1,5,5,5,5,5,1,
		1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,1,
		1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,1,
		1,5,5,5,5,5,1,1,1,1,1,1,1,1,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,1,
		1,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,1,
		1,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,1,
		1,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,

	};
	 
	 
	 int graph[V][V] = { {0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{8,0,12,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,12,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,6,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,6,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,4,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,4,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,5,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,4,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,10,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,16,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,10,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,10,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,8,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,4,0,0,0,0,4,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,8,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,7,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,8,0,0,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,4,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,14,0,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,14,0,6,0,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,6,0,10,0,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,6,0},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,6,0,12},
						{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0} };
						
					/*			
					    0-------1-----------2			3-----4		5---6
								:			:			:	  :		:	:
								:			:		7---8	  :		:	:
								:			:		:	:	  :		:	:
								:			:		:	:	  9-----10	:
							   11-----12	:       :   :	            :
					  13			   :   14-------15  :				:
					   :			   :	:			:				:
					  16---17---------18    :           :      19-------20
					   :	:				:			:		:			
					   :	:				:	  21----22		:		
					   :	:				:	   :			:		
					   :   23---------------24	   :			:   25--26
					   :					:	   :			:	 :	
					   :					:	   :			:	 :	
					   :					:	   :			:    :		
					  27---------28--------29   30-31  32-------33---34
								  :			:	 :		:				
								  :			:	 :		:				
								  :			:    :		:         35-----36
								  :			:	 :      :		   :	  :
								  :			:	 :		:          :	  :
					 37----38----39		   40----41		:		   :      :
					  :		:				:			:	42----43	  :
					  :		:				:			:	 :			  :
					  :		:				:			:	 :			  :
					  :	   44-------45		:			:	 :			  :
					  :				 :		:			:	 :			  :
					  :				 :		:			:	 :			  :
					  :				 :		:			:	 :			  :
					 46-------------47-----48----------49---50-----------51
					 
					 */

	 int s, d,source, dest;  
	loop:
	cout << "Enter source:";

	 cin >>s;
	 if (s > V-1 || s < 0)
	 {
		 cout << "Entered value not found\n";
		 goto loop;
	 }
	 source = s;
	 loop1:
	 cout << "Enter destination:";
	 cin >> d;
	 if (d > V-1 || d < 0)
	 {
		 cout << "Entered value not found\n";
		 goto loop1;
	 }
	 dest = d;
	 dijkstra(graph, source, dest);

	int length = sizeof(level) / sizeof(level[0]);
	int point[V] = {0,8,20,32,38,44,48,126,130,234,240,253,259,294,314,322,392,396,406,432,440,516,522,
                    592,608,632,636,784,794,804,808,810,814,824,828,973,979,1078,1084,1088,1098,1102,
                    1163,1169,1280,1288,1470,1484,1490,1500,1506,1518};
	int l, m=0;
	int path[V];
	for (l = plen; l >= 0; l--)
	{
		path[m] = point[node[l]];
		cout << node[l] << "\t";
		m++;
	}
	int i, j, k,prev,curr;
	for(i = 1; i < m; i++)
	{
		prev = path[i - 1] / 49;
		curr=path[i] / 49;
		if (prev == curr)
		{
			for (j = path[i - 1]; j <= path[i]; j++)
			{
				if (j == path[i - 1] || j == path[i])
				{
					level[j] = 9;
				}
				else
				{
					level[j] = 15;
				}
			}
			for (j = path[i-1]; j >= path[i]; j--)
			{
				if (j == path[i - 1] || j == path[i])
				{
					level[j] =9;
				}
				else
				{
					level[j] = 15;
				}
			}
		}
		else
		{
			for (k = path[i - 1]; k <= path[i];)
			{
				if (k == path[i - 1] || k == path[i])
				{
					level[k] = 9;
				}
				else
				{
					level[k] = 15;
				}
				k += 49;
			}
			for (k = path[i-1]; k >= path[i];)
			{
				if (k == path[i - 1] || k == path[i])
				{
					level[k] = 9;
				}
				else
				{
					level[k] = 15;
				}
				k -= 49;
			}

		}
	}


	TileMap map;
	if (!map.load("tile.png", sf::Vector2u(16, 16), level, 49, 31))
		return -1;

	while (window.isOpen())
	{
		sf::Event event;
		while (window.pollEvent(event))
		{
			if (event.type == sf::Event::Closed)
				window.close();
		}
		window.clear();
		window.draw(map);
		window.display();
	}

	return 0;
}
